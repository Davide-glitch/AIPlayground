// <auto-generated />
using AiPlayground.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AiPlayground.DataAccess.Migrations
{
    [DbContext(typeof(AiPlaygroundContext))]
    partial class AiPlaygroundContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "gpt-4o",
                            PlatformId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "gpt-4o-mini",
                            PlatformId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "gemini-2.0-flash",
                            PlatformId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "deepseek-reasoner",
                            PlatformId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "deepseek-chat",
                            PlatformId = 2
                        });
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Platforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://yt3.googleusercontent.com/MopgmVAFV9BqlzOJ-UINtmutvEPcNe5IbKMmP_4vZZo3vnJXcZGtybUBsXaEVxkmxKyGqX9R=s900-c-k-c0x00ffffff-no-rj",
                            Name = "OpenAI"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://www.futuroprossimo.it/wp-content/uploads/2025/01/deepseek.jpg",
                            Name = "DeepSeek"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Google_Gemini_logo.svg/1200px-Google_Gemini_logo.svg.png",
                            Name = "Gemini"
                        });
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Prompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("SystemMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("Prompts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpectedResult = "A friendly greeting message.",
                            Name = "Basic Greeting",
                            ScopeId = 1,
                            SystemMessage = "You are a helpful assistant.",
                            UserMessage = "Say hello to the user in a friendly way."
                        },
                        new
                        {
                            Id = 2,
                            ExpectedResult = "Code review with suggestions for improvement.",
                            Name = "Code Review",
                            ScopeId = 2,
                            SystemMessage = "You are an expert code reviewer.",
                            UserMessage = "Review this Python function for best practices."
                        },
                        new
                        {
                            Id = 3,
                            ExpectedResult = "An engaging opening paragraph for a mystery story.",
                            Name = "Story Beginning",
                            ScopeId = 3,
                            SystemMessage = "You are a creative writer.",
                            UserMessage = "Write the opening paragraph of a mystery novel."
                        });
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Run", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("PromptId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("ResponseTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2000);

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<double>("UserRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("PromptId");

                    b.ToTable("Runs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualResponse = "Hello! I'm delighted to meet you! How can I assist you today?",
                            ModelId = 1,
                            PromptId = 1,
                            Rating = 4.5,
                            ResponseTimeMs = 800,
                            Temperature = 0.69999999999999996,
                            UserRating = 4.5
                        },
                        new
                        {
                            Id = 2,
                            ActualResponse = "The code looks good but could benefit from type hints and docstrings.",
                            ModelId = 1,
                            PromptId = 2,
                            Rating = 4.2000000000000002,
                            ResponseTimeMs = 1200,
                            Temperature = 0.29999999999999999,
                            UserRating = 4.0
                        },
                        new
                        {
                            Id = 3,
                            ActualResponse = "The fog rolled in like a silent predator, consuming the streetlights one by one.",
                            ModelId = 1,
                            PromptId = 3,
                            Rating = 4.7999999999999998,
                            ResponseTimeMs = 900,
                            Temperature = 0.80000000000000004,
                            UserRating = 4.5
                        },
                        new
                        {
                            Id = 4,
                            ActualResponse = "Hi there! Nice to meet you!",
                            ModelId = 2,
                            PromptId = 1,
                            Rating = 3.7999999999999998,
                            ResponseTimeMs = 600,
                            Temperature = 0.69999999999999996,
                            UserRating = 3.5
                        },
                        new
                        {
                            Id = 5,
                            ActualResponse = "Your code is functional. Consider adding error handling.",
                            ModelId = 2,
                            PromptId = 2,
                            Rating = 3.5,
                            ResponseTimeMs = 750,
                            Temperature = 0.29999999999999999,
                            UserRating = 3.7999999999999998
                        },
                        new
                        {
                            Id = 6,
                            ActualResponse = "Greetings! I'm here to help with whatever you need.",
                            ModelId = 3,
                            PromptId = 1,
                            Rating = 4.0999999999999996,
                            ResponseTimeMs = 2500,
                            Temperature = 0.69999999999999996,
                            UserRating = 4.2000000000000002
                        },
                        new
                        {
                            Id = 7,
                            ActualResponse = "Detective Sarah Chen had seen enough crime scenes to know when something was off.",
                            ModelId = 3,
                            PromptId = 3,
                            Rating = 4.2999999999999998,
                            ResponseTimeMs = 3200,
                            Temperature = 0.80000000000000004,
                            UserRating = 4.0999999999999996
                        },
                        new
                        {
                            Id = 8,
                            ActualResponse = "This function demonstrates good separation of concerns. I recommend adding unit tests.",
                            ModelId = 4,
                            PromptId = 2,
                            Rating = 4.5999999999999996,
                            ResponseTimeMs = 8500,
                            Temperature = 0.20000000000000001,
                            UserRating = 4.7999999999999998
                        },
                        new
                        {
                            Id = 9,
                            ActualResponse = "Hello! I'm ready to assist you with any questions you might have.",
                            ModelId = 4,
                            PromptId = 1,
                            Rating = 3.8999999999999999,
                            ResponseTimeMs = 12000,
                            Temperature = 0.5,
                            UserRating = 4.0
                        },
                        new
                        {
                            Id = 10,
                            ActualResponse = "Hey! Great to meet you. What can I help you with today?",
                            ModelId = 5,
                            PromptId = 1,
                            Rating = 3.7000000000000002,
                            ResponseTimeMs = 4200,
                            Temperature = 0.59999999999999998,
                            UserRating = 3.8999999999999999
                        },
                        new
                        {
                            Id = 11,
                            ActualResponse = "The old mansion stood silent against the stormy night, hiding secrets within its walls.",
                            ModelId = 5,
                            PromptId = 3,
                            Rating = 4.0,
                            ResponseTimeMs = 5800,
                            Temperature = 0.90000000000000002,
                            UserRating = 3.7999999999999998
                        });
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Scope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scopes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coding"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Creative Writing"
                        });
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Model", b =>
                {
                    b.HasOne("AiPlayground.DataAccess.Entities.Platform", "Platform")
                        .WithMany("Models")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Model_Platform");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Prompt", b =>
                {
                    b.HasOne("AiPlayground.DataAccess.Entities.Scope", "Scope")
                        .WithMany("Prompts")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Prompt_Scope");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Run", b =>
                {
                    b.HasOne("AiPlayground.DataAccess.Entities.Model", "Model")
                        .WithMany("Runs")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Run_Model");

                    b.HasOne("AiPlayground.DataAccess.Entities.Prompt", "Prompt")
                        .WithMany("Runs")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Run_Prompt");

                    b.Navigation("Model");

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Model", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Prompt", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Scope", b =>
                {
                    b.Navigation("Prompts");
                });
#pragma warning restore 612, 618
        }
    }
}

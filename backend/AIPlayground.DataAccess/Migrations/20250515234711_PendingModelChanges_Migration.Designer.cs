// <auto-generated />
using AiPlayground.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AiPlayground.DataAccess.Migrations
{
    [DbContext(typeof(AiPlaygroundContext))]
    [Migration("20250515234711_PendingModelChanges_Migration")]
    partial class PendingModelChanges_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "gpt-4o",
                            PlatformId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "gpt-4o-mini",
                            PlatformId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "gemini-2.0-flash",
                            PlatformId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "deepseek-reasoner",
                            PlatformId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "deepseek-chat",
                            PlatformId = 2
                        });
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Platforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://yt3.googleusercontent.com/MopgmVAFV9BqlzOJ-UINtmutvEPcNe5IbKMmP_4vZZo3vnJXcZGtybUBsXaEVxkmxKyGqX9R=s900-c-k-c0x00ffffff-no-rj",
                            Name = "OpenAI"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://www.futuroprossimo.it/wp-content/uploads/2025/01/deepseek.jpg",
                            Name = "DeepSeek"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Google_Gemini_logo.svg/1200px-Google_Gemini_logo.svg.png",
                            Name = "Gemini"
                        });
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Prompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("SystemMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("Prompts", (string)null);
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Run", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("PromptId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<double>("UserRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("PromptId");

                    b.ToTable("Runs", (string)null);
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Scope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scopes", (string)null);
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Model", b =>
                {
                    b.HasOne("AiPlayground.DataAccess.Entities.Platform", "Platform")
                        .WithMany("Models")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Model_Platform");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Prompt", b =>
                {
                    b.HasOne("AiPlayground.DataAccess.Entities.Scope", "Scope")
                        .WithMany("Prompts")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Prompt_Scope");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Run", b =>
                {
                    b.HasOne("AiPlayground.DataAccess.Entities.Model", "Model")
                        .WithMany("Runs")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Run_Model");

                    b.HasOne("AiPlayground.DataAccess.Entities.Prompt", "Prompt")
                        .WithMany("Runs")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Run_Prompt");

                    b.Navigation("Model");

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Model", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Prompt", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("AiPlayground.DataAccess.Entities.Scope", b =>
                {
                    b.Navigation("Prompts");
                });
#pragma warning restore 612, 618
        }
    }
}
